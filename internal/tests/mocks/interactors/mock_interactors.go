// Code generated by MockGen. DO NOT EDIT.
// Source: interactors.go

// Package mock_interactors is a generated GoMock package.
package mock_interactors

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	porker "github.com/swallowarc/porker-proto/pkg/porker"
	room "github.com/swallowarc/porker-rpc/internal/domains/room"
	ports "github.com/swallowarc/porker-rpc/internal/usecases/ports"
)

// MockLoginInteractor is a mock of LoginInteractor interface.
type MockLoginInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockLoginInteractorMockRecorder
}

// MockLoginInteractorMockRecorder is the mock recorder for MockLoginInteractor.
type MockLoginInteractorMockRecorder struct {
	mock *MockLoginInteractor
}

// NewMockLoginInteractor creates a new mock instance.
func NewMockLoginInteractor(ctrl *gomock.Controller) *MockLoginInteractor {
	mock := &MockLoginInteractor{ctrl: ctrl}
	mock.recorder = &MockLoginInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginInteractor) EXPECT() *MockLoginInteractorMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginInteractor) Login(ctx context.Context, login *porker.Login) (*porker.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login)
	ret0, _ := ret[0].(*porker.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginInteractorMockRecorder) Login(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginInteractor)(nil).Login), ctx, login)
}

// Logout mocks base method.
func (m *MockLoginInteractor) Logout(ctx context.Context, login *porker.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockLoginInteractorMockRecorder) Logout(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLoginInteractor)(nil).Logout), ctx, login)
}

// MockPokerInteractor is a mock of PokerInteractor interface.
type MockPokerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockPokerInteractorMockRecorder
}

// MockPokerInteractorMockRecorder is the mock recorder for MockPokerInteractor.
type MockPokerInteractorMockRecorder struct {
	mock *MockPokerInteractor
}

// NewMockPokerInteractor creates a new mock instance.
func NewMockPokerInteractor(ctrl *gomock.Controller) *MockPokerInteractor {
	mock := &MockPokerInteractor{ctrl: ctrl}
	mock.recorder = &MockPokerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokerInteractor) EXPECT() *MockPokerInteractorMockRecorder {
	return m.recorder
}

// CanEnter mocks base method.
func (m *MockPokerInteractor) CanEnter(ctx context.Context, roomID room.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanEnter", ctx, roomID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanEnter indicates an expected call of CanEnter.
func (mr *MockPokerInteractorMockRecorder) CanEnter(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanEnter", reflect.TypeOf((*MockPokerInteractor)(nil).CanEnter), ctx, roomID)
}

// Create mocks base method.
func (m *MockPokerInteractor) Create(ctx context.Context, loginID string) (room.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, loginID)
	ret0, _ := ret[0].(room.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPokerInteractorMockRecorder) Create(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPokerInteractor)(nil).Create), ctx, loginID)
}

// Enter mocks base method.
func (m *MockPokerInteractor) Enter(ctx context.Context, roomID room.ID, loginID string) (ports.PokerListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enter", ctx, roomID, loginID)
	ret0, _ := ret[0].(ports.PokerListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enter indicates an expected call of Enter.
func (mr *MockPokerInteractorMockRecorder) Enter(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enter", reflect.TypeOf((*MockPokerInteractor)(nil).Enter), ctx, roomID, loginID)
}

// Leave mocks base method.
func (m *MockPokerInteractor) Leave(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockPokerInteractorMockRecorder) Leave(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockPokerInteractor)(nil).Leave), ctx, roomID, loginID)
}

// Reset mocks base method.
func (m *MockPokerInteractor) Reset(ctx context.Context, roomID room.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockPokerInteractorMockRecorder) Reset(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPokerInteractor)(nil).Reset), ctx, roomID)
}

// VoteCounting mocks base method.
func (m *MockPokerInteractor) VoteCounting(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteCounting", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoteCounting indicates an expected call of VoteCounting.
func (mr *MockPokerInteractorMockRecorder) VoteCounting(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteCounting", reflect.TypeOf((*MockPokerInteractor)(nil).VoteCounting), ctx, roomID, loginID)
}

// Voting mocks base method.
func (m *MockPokerInteractor) Voting(ctx context.Context, roomID room.ID, loginID string, point porker.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Voting", ctx, roomID, loginID, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// Voting indicates an expected call of Voting.
func (mr *MockPokerInteractorMockRecorder) Voting(ctx, roomID, loginID, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Voting", reflect.TypeOf((*MockPokerInteractor)(nil).Voting), ctx, roomID, loginID, point)
}
