// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	porker "github.com/swallowarc/porker-proto/pkg/porker"
	room "github.com/swallowarc/porker-rpc/internal/domains/room"
)

// MockLoginRepository is a mock of LoginRepository interface.
type MockLoginRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRepositoryMockRecorder
}

// MockLoginRepositoryMockRecorder is the mock recorder for MockLoginRepository.
type MockLoginRepositoryMockRecorder struct {
	mock *MockLoginRepository
}

// NewMockLoginRepository creates a new mock instance.
func NewMockLoginRepository(ctrl *gomock.Controller) *MockLoginRepository {
	mock := &MockLoginRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRepository) EXPECT() *MockLoginRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockLoginRepository) FindByID(ctx context.Context, loginID string) (*porker.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, loginID)
	ret0, _ := ret[0].(*porker.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoginRepositoryMockRecorder) FindByID(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoginRepository)(nil).FindByID), ctx, loginID)
}

// Logout mocks base method.
func (m *MockLoginRepository) Logout(ctx context.Context, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockLoginRepositoryMockRecorder) Logout(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLoginRepository)(nil).Logout), ctx, loginID)
}

// NewLogin mocks base method.
func (m *MockLoginRepository) NewLogin(ctx context.Context, loginID string) (*porker.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLogin", ctx, loginID)
	ret0, _ := ret[0].(*porker.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLogin indicates an expected call of NewLogin.
func (mr *MockLoginRepositoryMockRecorder) NewLogin(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLogin", reflect.TypeOf((*MockLoginRepository)(nil).NewLogin), ctx, loginID)
}

// ReLogin mocks base method.
func (m *MockLoginRepository) ReLogin(ctx context.Context, login *porker.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockLoginRepositoryMockRecorder) ReLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReLogin", reflect.TypeOf((*MockLoginRepository)(nil).ReLogin), ctx, login)
}

// MockPokerRepository is a mock of PokerRepository interface.
type MockPokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPokerRepositoryMockRecorder
}

// MockPokerRepositoryMockRecorder is the mock recorder for MockPokerRepository.
type MockPokerRepositoryMockRecorder struct {
	mock *MockPokerRepository
}

// NewMockPokerRepository creates a new mock instance.
func NewMockPokerRepository(ctrl *gomock.Controller) *MockPokerRepository {
	mock := &MockPokerRepository{ctrl: ctrl}
	mock.recorder = &MockPokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokerRepository) EXPECT() *MockPokerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPokerRepository) Create(ctx context.Context, loginID string) (room.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, loginID)
	ret0, _ := ret[0].(room.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPokerRepositoryMockRecorder) Create(ctx, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPokerRepository)(nil).Create), ctx, loginID)
}

// Delete mocks base method.
func (m *MockPokerRepository) Delete(ctx context.Context, roomID room.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPokerRepositoryMockRecorder) Delete(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPokerRepository)(nil).Delete), ctx, roomID)
}

// Enter mocks base method.
func (m *MockPokerRepository) Enter(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enter", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enter indicates an expected call of Enter.
func (mr *MockPokerRepositoryMockRecorder) Enter(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enter", reflect.TypeOf((*MockPokerRepository)(nil).Enter), ctx, roomID, loginID)
}

// IsExistsInRoom mocks base method.
func (m *MockPokerRepository) IsExistsInRoom(ctx context.Context, roomID room.ID, loginID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistsInRoom", ctx, roomID, loginID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistsInRoom indicates an expected call of IsExistsInRoom.
func (mr *MockPokerRepositoryMockRecorder) IsExistsInRoom(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsInRoom", reflect.TypeOf((*MockPokerRepository)(nil).IsExistsInRoom), ctx, roomID, loginID)
}

// Leave mocks base method.
func (m *MockPokerRepository) Leave(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockPokerRepositoryMockRecorder) Leave(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockPokerRepository)(nil).Leave), ctx, roomID, loginID)
}

// ListMembers mocks base method.
func (m *MockPokerRepository) ListMembers(ctx context.Context, roomID room.ID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", ctx, roomID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockPokerRepositoryMockRecorder) ListMembers(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockPokerRepository)(nil).ListMembers), ctx, roomID)
}

// ReadStream mocks base method.
func (m *MockPokerRepository) ReadStream(ctx context.Context, roomID room.ID, messageID string) (string, *porker.PokerSituation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStream", ctx, roomID, messageID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*porker.PokerSituation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStream indicates an expected call of ReadStream.
func (mr *MockPokerRepositoryMockRecorder) ReadStream(ctx, roomID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStream", reflect.TypeOf((*MockPokerRepository)(nil).ReadStream), ctx, roomID, messageID)
}

// ReadStreamLatest mocks base method.
func (m *MockPokerRepository) ReadStreamLatest(ctx context.Context, roomID room.ID) (string, *porker.PokerSituation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStreamLatest", ctx, roomID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*porker.PokerSituation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStreamLatest indicates an expected call of ReadStreamLatest.
func (mr *MockPokerRepositoryMockRecorder) ReadStreamLatest(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStreamLatest", reflect.TypeOf((*MockPokerRepository)(nil).ReadStreamLatest), ctx, roomID)
}

// Update mocks base method.
func (m *MockPokerRepository) Update(ctx context.Context, ps *porker.PokerSituation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPokerRepositoryMockRecorder) Update(ctx, ps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPokerRepository)(nil).Update), ctx, ps)
}
